@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using StationeryManager.Util
@using System.Net.Http.Headers
@inherits LayoutComponentBase
@inject AppStateService AppState

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4 d-flex justify-between align-center">
			<MudText Typo="Typo.h6">@AppState.Title</MudText>

			@if (string.IsNullOrEmpty(AppState.UserName))
			{
				<MudButton Color="Color.Primary" OnClick="@(() => AppState.ShowLoginDialog?.Invoke())">Đăng nhập</MudButton>
			}
			else
			{
				<MudButton Color="Color.Primary" OnClick="@(() => AppState.ShowUserProfile?.Invoke())">@AppState.UserEmail</MudButton>
			}
		</div>
		@* Required *@
		<MudThemeProvider />
		<MudPopoverProvider />

		@* Needed for dialogs *@
		<MudDialogProvider />

		@* Needed for snackbars *@
		<MudSnackbarProvider />

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

@inject HttpClient Http
@inject ProtectedLocalStorage LocalStorage
@code {

	protected override async Task OnInitializedAsync()
	{
		var result = await LocalStorage.GetAsync<string>("authToken");
		var userEmailResult = await LocalStorage.GetAsync<string>("userEmail");
		var token = result.Success ? result.Value : null;

		if (!string.IsNullOrEmpty(token))
		{
			Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
		}

		if (userEmailResult.Success && !string.IsNullOrEmpty(userEmailResult.Value))
		{
			AppState.UserEmail = userEmailResult.Value;
		}
	}


}
