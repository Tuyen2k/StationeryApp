@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using StationeryManager.Util
@using System.Net.Http.Headers
@inherits LayoutComponentBase
@inject AppStateService AppState

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="px-4 d-flex justify-between align-center header-top">
			<MudText Typo="Typo.h6">@AppState.Title</MudText>

			@if (string.IsNullOrEmpty(AppState.UserEmail))
			{
				<MudButton Color="Color.Primary" OnClick="@(() => {Navigation.NavigateTo($"/login?redirect={CurrentUrl}");})">Đăng nhập</MudButton>
			}
			else
			{
				<div>
					<MudButton Color="Color.Primary" OnClick="@(() => AppState.ShowUserProfile?.Invoke())">@AppState.UserEmail</MudButton>
					<MudButton Color="Color.Primary" OnClick="@(() => Logout())">Đăng xuất</MudButton>
				</div>
			}
		</div>
		@* Required *@
		<MudThemeProvider />
		<MudPopoverProvider />

		@* Needed for dialogs *@
		<MudDialogProvider />

		@* Needed for snackbars *@
		<MudSnackbarProvider />

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

<div id="blazor-error-ui">
	An unhandled error has occurred.
	<a href="" class="reload">Reload</a>
	<a class="dismiss">🗙</a>
</div>

@inject HttpClient HttpClient
@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@code {

	private string CurrentUrl => Navigation.ToBaseRelativePath(Navigation.Uri);

	protected override async Task OnInitializedAsync()
	{
		var result = await LocalStorage.GetAsync<string>("authToken");
		var userEmailResult = await LocalStorage.GetAsync<string>("userEmail");
		var token = result.Success ? result.Value : null;

		if (!string.IsNullOrEmpty(token))
		{
			HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
			AppState.IsLoggedIn = true;
			AppState.Token = token;
		}

		if (userEmailResult.Success && !string.IsNullOrEmpty(userEmailResult.Value))
		{
			AppState.UserEmail = userEmailResult.Value;
		}

		AppState.OnTitleChanged += UpdateTitle;

		await base.OnInitializedAsync();
	}

	private async Task Logout()
	{
		// Remove the token from local storage
		await LocalStorage.DeleteAsync("authToken");
		await LocalStorage.DeleteAsync("userEmail");
		HttpClient.DefaultRequestHeaders.Authorization = null;

		// check local storage
		var result = await LocalStorage.GetAsync<string>("authToken");
		var emailResult = await LocalStorage.GetAsync<string>("authToken");
		var token = result.Success ? result.Value : null;
		var email = emailResult.Success ? emailResult.Value : null;

		// set default value to AppStateService
		if (string.IsNullOrEmpty(token) && string.IsNullOrEmpty(email))
		{
			AppState.IsLoggedIn = false;
			AppState.Token = string.Empty;
			AppState.UserEmail = string.Empty;
			Snackbar.Add("Đăng xuất thành công", Severity.Success);
			
			AppState.NotifyLoginStateChanged(); // thông báo cho component con

			return;
		}

		Snackbar.Add("Đăng xuất thất bại", Severity.Error);

	}

	private void UpdateTitle()
	{
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		AppState.OnTitleChanged -= UpdateTitle;
	}

}
