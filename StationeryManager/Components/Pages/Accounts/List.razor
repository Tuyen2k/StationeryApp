@page "/accounts/"
@using StationeryManager.Services
@using StationeryManager.Shared
@using StationeryManager.Util
@using StationeryManagerLib.Entities
@using StationeryManagerLib.RequestModel

<MudGrid>

	<MudPaper Class="w-100 d-flex align-content-center justify-content-between mt-2 gap-10 p-2">
		<MudTextField Class="search" @bind-Value="_searchString" Placeholder="Tìm kiếm tài khoản" Adornment="Adornment.Start" Icon="@Icons.Material.Filled.Search" />
		<MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="OnSearch" />
		@if (AppState.IsLoggedIn)
		{
			<MudButton Color="Color.Primary" OnClick="@(() => CreateAccount())" StartIcon="@Icons.Material.Filled.Add">Thêm tài khoản</MudButton>
		}		
	</MudPaper>

	<MudPaper Class="w-100 mt-2">
		<MudTable Class="width" ServerData="ServerReload" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" @ref="_table">
			<HeaderContent>
				<MudTh>Tên tài khoản</MudTh>
				<MudTh>Email</MudTh>
				@* <MudTh>Ngày tạo</MudTh> *@
				<MudTh>Số điện thoại</MudTh>
				<MudTh>Lịch sử thao tác</MudTh>
				<MudTh>Ctrl</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Tên tài khoản">@context.Name</MudTd>
				<MudTd DataLabel="Email">@context.Email</MudTd>
				@* <MudTd DataLabel="Ngày tạo">@context.CreatedAt.ToString("HH:mm dd/MM/yyyy")</MudTd> *@
				<MudTd DataLabel="Số điện thoại">@context.Phone</MudTd>
				<MudTd DataLabel="Lịch sử thao tác">
					<div>
						@if (!string.IsNullOrEmpty(context.CreatedByAccountEmail))
						{
							<div><strong>Người tạo:</strong> @context.CreatedByAccountEmail - @context.CreatedAt.ToString("HH:mm dd/MM/yyyy")</div>
						}
						@if (!string.IsNullOrEmpty(context.UpdatedByAccountEmail))
						{
							<div><strong>Người sửa cuối:</strong> @context.UpdatedByAccountEmail - @context.UpdatedAt.ToString("HH:mm dd/MM/yyyy")</div>
						}
					</div>
				</MudTd>
				<MudTd DataLabel="Ctrl">
					<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => UpdateAccount(context))" />
					<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteAccount(context))" />
				</MudTd>
			</RowTemplate>
			<NoRecordsContent>
				<MudText>Không có tài khoản nào</MudText>
			</NoRecordsContent>
			<LoadingContent>
				<MudText>Loading...</MudText>
			</LoadingContent>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
	</MudPaper>

</MudGrid>

@inject IAccountServices AccountServices
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AppStateService AppState
@code {

	private MudTable<AccountModel> _table = null!;
	private bool _loading = false;
	private string _searchString = string.Empty;

	protected override void OnInitialized()
	{
		AppState.Title = "Danh sách tài khoản";
		AppState.OnLoginStateChanged += StateHasChanged;
	}

	private async Task<TableData<AccountModel>> ServerReload(TableState state, CancellationToken token)
	{
		try {
			var filter = new FilterModel() {
					Limit = state.PageSize,
					Page = state.Page,
					Name = _searchString
				};
			var accounts = await AccountServices.GetAllAccounts(filter);
			var total = await AccountServices.CountAll(filter);
			return new TableData<AccountModel>() {
					TotalItems = total,
					Items = accounts
				};
		}catch(Exception e) {
			return new TableData<AccountModel>()
				{
					TotalItems = 0,
					Items = []
				};
		}
	}

	private async Task DeleteAccount(AccountModel account)
	{
		var result = await DialogService.ShowMessageBox(
			"Xoá tài khoản",
			$"Bạn có chắc muốn xóa tài khoản {account.Name.ToUpper()} không?",
			yesText: "Xác nhận", noText: "Hủy");

		if (result == true)
		{
			var res = await AccountServices.DeleteAccount(account.Id.ToString());
			Snackbar.Add($"Đã xóa tài khoản {account.Name} thành công", Severity.Success);
			await _table.ReloadServerData();
		}
		else
		{
			Snackbar.Add("Đã hủy thao tác!", Severity.Warning);
		}
	}


	private async Task UpdateAccount(AccountModel account)
	{
		var parameters = new DialogParameters<DialogUpdateAccount>();
		parameters.Add("Account", account);
		var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
		var dialog = await DialogService.ShowAsync<DialogUpdateAccount>(
			$"Cập nhật tài khoản", parameters, options);
		var result = await dialog.Result;
		if (result != null && !result.Canceled)
		{
			await _table.ReloadServerData();
		}
		else
		{
			Snackbar.Add("Đã hủy thao tác!", Severity.Warning);
		}

	}

	private async Task CreateAccount()
	{
		var parameters = new DialogParameters<DialogCreateAccount>();
		var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };
		var dialog = await DialogService.ShowAsync<DialogCreateAccount>(
			"Tạo tài khoản", parameters, options);
		var result = await dialog.Result;
		if (result != null && !result.Canceled)
		{
			await _table.ReloadServerData();
		}
		else
		{
			Snackbar.Add("Đã hủy thao tác!", Severity.Warning);
		}

	}

	private async Task OnSearch()
	{
		await _table.ReloadServerData();
	}

	public void Dispose()
	{
		AppState.OnLoginStateChanged -= StateHasChanged;
	}
}
