@using StationeryManager.Services
@using StationeryManagerLib.Entities
@using StationeryManagerLib.RequestModel

<EditForm Model="Request" OnValidSubmit="OnSave">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudDialog>
        <DialogContent>
            @if (_loading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
            }
            
            <MudGrid Spacing="2">
                <MudItem xs="12" lg="12">
                    <!-- Name Field -->
                    <MudTextField @bind-Value="Request.Name"
                                  Label="Tên danh mục"
                                  For="@(() => Request.Name)"
                                  Required="true"/>

                    <!-- Email Field -->
                    <MudTextField @bind-Value="Request.Description"
                                  Label="Ghi chú"
                                  Lines="4"
                                  For="@(() => Request.Description)" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <!-- Close Button -->
            <MudButton Color="Color.Default"
                       Variant="Variant.Outlined"
                       OnClick="CloseDialog"
                       StartIcon="@Icons.Material.Filled.Close"
                       Size="Size.Medium">
                Đóng
            </MudButton>
            <!-- Save Button -->
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       ButtonType="ButtonType.Submit"
                       StartIcon="@Icons.Material.Filled.PlaylistAddCheck"
                       Size="Size.Medium">
                @if (Category != null)
                {
                    <span>Cập nhật</span>
                }
                else
                {
                    <span>Thêm mới</span>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@inject ISnackbar Snackbar
@inject ICategoryServices CategoryServices

@code {
    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter]
    public CategoryModel? Category { get; set; } = new();

    private bool _loading = false;

    private CategoryRequest Request { get; set; } = new();
    private bool _showPassword = false;

    protected override async Task OnInitializedAsync()
    {
        if (Category != null)
        {
            Request = new CategoryRequest()
				{
                    Name = Category.Name,
                    Description = Category.Description,
				};
        }

		await base.OnInitializedAsync();
    }

    private void CloseDialog() => MudDialog.Cancel();

    private async Task OnSave()
    {
		_loading = true;
        if(Category == null)
        {
            var result = await CategoryServices.CreateAsync(Request);
            if (result)
            {
                Snackbar.Add("Thêm danh mục phân loại thành công", Severity.Success);
            }
            else
            {
                Snackbar.Add("Thêm danh mục phân loại thất bại", Severity.Error);
                _loading = false;
				return;
            }

        }
        else
        {
            var result = await CategoryServices.UpdateAsync(Category.Id.ToString(), Request);
            if (result)
            {
                Snackbar.Add("Cập nhật danh mục phân loại thành công", Severity.Success);
            }
            else
            {
				Snackbar.Add("Cập nhật danh mục phân loại thất bại", Severity.Error);
                _loading = false;
                return;
            }
        }
		_loading = false;
		MudDialog.Close(DialogResult.Ok(true));
    }
}
