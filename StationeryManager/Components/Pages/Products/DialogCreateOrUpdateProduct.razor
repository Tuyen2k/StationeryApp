@using StationeryManager.Services
@using StationeryManager.Shared.FieldAutoComplete
@using StationeryManagerLib.Entities
@using StationeryManagerLib.RequestModel

<EditForm Model="Request" OnValidSubmit="OnSave">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<MudDialog>
		<DialogContent>
			@if (_loading)
			{
				<MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
			}

			<MudGrid Spacing="2">
				<MudItem xs="12" md="6">

					<MudTextField @bind-Value="Request.Name"
								  Label="Tên sản phẩm"
								  For="@(() => Request.Name)"
								  Required="true" />

					<MudTextField @bind-Value="Request.Sku"
								  Label="Mã Sku"
								  For="@(() => Request.Sku)" />

					<SubCategoryFieldAutoComplete Default="subcategorySelected" ValueChanged="OnSelectedSubCategory" />

					<MudNumericField @bind-Value="Request.Price" Format="N0" Label="Giá" For="@(() => Request.Price)" Required="true" />

					<MudTextField @bind-Value="Request.Description"
								  Label="Ghi chú"
								  Lines="4"
								  For="@(() => Request.Description)" />
				</MudItem>
				<MudItem xs="12" md="6">
					<MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg, .jfif" FilesChanged="UploadFiles" MaximumFileCount="100">
						<ActivatorContent>
							<MudButton Variant="Variant.Filled"
									   Color="Color.Primary"
									   StartIcon="@Icons.Material.Filled.CloudUpload">
								Ảnh sản phẩm
							</MudButton>
						</ActivatorContent>
					</MudFileUpload>
					<MudPaper Class="d-flex justify-center align-center" Style="height: 100%; width: 100%; margin-top: 10px;">
						<MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg, .jfif" FilesChanged="UploadFiles" MaximumFileCount="100">
							<ActivatorContent>
								<MudImage Alt="product image" Src="@GetImageSource()" Style="width: 100%; height: auto" />
							</ActivatorContent>
						</MudFileUpload>

					</MudPaper>
				</MudItem>
			</MudGrid>
		</DialogContent>
		<DialogActions>
			<!-- Close Button -->
			<MudButton Color="Color.Default"
					   Variant="Variant.Outlined"
					   OnClick="CloseDialog"
					   StartIcon="@Icons.Material.Filled.Close"
					   Size="Size.Medium">
				Đóng
			</MudButton>
			<!-- Save Button -->
			<MudButton Color="Color.Primary"
					   Variant="Variant.Filled"
					   ButtonType="ButtonType.Submit"
					   StartIcon="@Icons.Material.Filled.PlaylistAddCheck"
					   Size="Size.Medium">
				@if (Product != null)
				{
					<span>Cập nhật</span>
				}
				else
				{
					<span>Thêm mới</span>
				}
			</MudButton>
		</DialogActions>
	</MudDialog>
</EditForm>


@inject ISnackbar Snackbar
@inject ISubCategoryServices SubCategoryServices
@inject IProductServices ProductServices
@inject IMediaServices MediaServices

@code {
	[CascadingParameter]
	public IMudDialogInstance MudDialog { get; set; } = null!;
	[Parameter]
	public ProductModel? Product { get; set; } = new();

	private bool _loading = false;

	private ProductRequest Request { get; set; } = new();
	private bool _showPassword = false;
	private List<SubCategoryModel> SubCategories { get; set; } = [];
	private SubCategoryModel? subcategorySelected;

	// image
	private IBrowserFile? selectedImage;
	private string? previewImage;

	protected override async Task OnInitializedAsync()
	{
		if (Product != null)
		{
			Request = new ProductRequest()
				{
					Name = Product.Name,
					Description = Product.Description,
					SubCategoryId = Product.SubCategoryId,
					Price = Product.Price,
					Sku = Product.Sku,
					ImageUrl = Product.ImageUrl
				};

			subcategorySelected = await SubCategoryServices.GetByIdAsync(Product.SubCategoryId);
		}

		// SubCategories = await SubCategoryServices.GetAllAsync(null);

		await base.OnInitializedAsync();
	}

	private void CloseDialog() => MudDialog.Cancel();

	private async Task OnSave()
	{
		try
		{
			if (selectedImage != null)
			{
				var path = await MediaServices.UploadImage(selectedImage);
				if (string.IsNullOrEmpty(path))
				{
					Snackbar.Add("Có lỗi xảy ra khi tải ảnh lên", Severity.Error);
					_loading = false;
					return;
				}
				Request.ImageUrl = path;
			}

			_loading = true;
			if (Product == null)
			{
				var result = await ProductServices.CreateAsync(Request);
				if (result)
				{
					Snackbar.Add("Thêm sản phẩm thành công", Severity.Success);
				}
				else
				{
					Snackbar.Add("Thêm sản phẩm thất bại", Severity.Error);
					_loading = false;
					return;
				}

			}
			else
			{
				var result = await ProductServices.UpdateAsync(Product.Id.ToString(), Request);
				if (result)
				{
					Snackbar.Add("Cập nhật sản phẩm thành công", Severity.Success);
				}
				else
				{
					Snackbar.Add("Cập nhật sản phẩm thất bại", Severity.Error);
					_loading = false;
					return;
				}
			}
			_loading = false;
			MudDialog.Close(DialogResult.Ok(true));
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Có lỗi xảy ra {ex.Message}", Severity.Error);
			_loading = false;
			return;
		}

	}

	private void OnSelectedSubCategory(SubCategoryModel subcategory)
	{
		subcategorySelected = subcategory;
		Request.SubCategoryId = subcategory != null ? subcategory.Id.ToString() : string.Empty;
	}

	private async Task UploadFiles(IBrowserFile file)
	{
		const long maxSize = 5 * 1024 * 1024; // 5MB

		if (file.Size > maxSize)
		{
			Snackbar.Add("Kích thước ảnh vượt quá 5MB. Vui lòng chọn ảnh nhỏ hơn.", Severity.Warning);
			return;
		}

		selectedImage = file;
		using var stream = selectedImage.OpenReadStream(maxAllowedSize: maxSize);
		var buffer = new byte[selectedImage.Size];
		await stream.ReadAsync(buffer);
		previewImage = $"data:{selectedImage.ContentType};base64,{Convert.ToBase64String(buffer)}";
	}

	private string GetImageSource()
	{
		if (!string.IsNullOrEmpty(previewImage))
			return previewImage;

		if (Product != null && !string.IsNullOrEmpty(Product.ImageUrl))
			return $"https://localhost:7069/{Product.ImageUrl}";

		return "../images/image_default.png";
	}

}
